#!/usr/bin/env bash

set -e # abort script immediately if any command fails

# NOTES
# rysnc and slashes:
#
#   rsync -a /usr/local /media/disk
#
# creates 'local' in /media/disk, whereas
#
#   rsync -a /usr/local/ /media/disk
#
# copies all the stuff from /usr/local into disk but doesn't create
# a parent directory -- you very rarely want to do that, so don't use
# trailing slashes on sources

# todo: write stdout/err to file in backups directory; make sure to include date

# TODO: sometimes rsync can't copy a file due to permissions and ends up exiting
# with an "error status", the backup doesn't complete. Should do something more
# useful in this case. Either (a) identify and ignore it -- don't treat it as an
# 'error' (b) ask the user if its ok, then instruct the user how to proceed
# (right now this is as simple as two specific mv commands)

TODAY=`date '+%F'`

#HD="/media/timv/gluttony"
HD="/media/timv/disk"
BACKUP="$HD/backups"
NEW="$BACKUP/new"


echo "[INFO] checking for most recent backup.."
echo
echo "backups"
echo "============================"
ls -1 "$BACKUP" | sort -n
echo

if [ -e "$NEW" ]
then
    echo "[ERROR] Previous backup failed. Delete '$NEW' to continue."
    exit 1
fi

if [ -e "$BACKUP/$TODAY-latest" ] || [ -e "$BACKUP/$TODAY" ]
then
    echo "** already made a back up today **"
    exit 1
fi

LATEST=$(echo $BACKUP/*-latest)

if [ -e $LATEST ]
then
    echo [INFO] latest back up: $LATEST
    LINKDEST=--link-dest=$LATEST
else
    echo "[INFO] There was no latest backup to link to.. creating fresh backup"
fi

if ! sudo rsync -aR --exclude='/home/timv/.gvfs' $LINKDEST /home/timv $NEW
then
    echo "$TODAY [ERROR] Failed to create backup."
    exit 1
fi

if [ -e "$BACKUP/$TODAY-latest" ]; then
    notify-send "backup complete, but $LATEST already exists so you have to rename it."
else
    mv "$NEW" "$BACKUP/$TODAY-latest"
    if [ -e "$LATEST" ]; then
        mv "$LATEST" ${LATEST:0:${#LATEST}-7}
    fi
    notify-send 'backup complete!'
fi
